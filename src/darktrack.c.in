#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#include <common.h>

#include "image.h"

static char** demo_names;
static int demo_classes;

static network* net;
static image buff[3];
static image buff_letter[3];
static int buff_index = 0;
static CvCapture* cap;
static float fps = 0;
static float demo_thresh = @DARKNET_THRESHOLD@;
static float demo_hier = @DARKNET_THRESHOLD@;

static int demo_frame = 3;
static int demo_index = 0;
static float** predictions;
static float* avg;
static int demo_done = 0;
static int demo_total = 0;
double demo_time;

// physycom add
#define MAX_FRAME_INFO_TO_STORE 10                        // size of json output
#define MAX_LINE_LEN            20                        // static char buffer size
#define JSON_FOLDER             "data"                    // output folder
#define SAMPLING_DT_SEC         5                         // dt between single records
#define FPS                     3                         // source fps
#define SAMPLING_FRAME_RATE     (SAMPLING_DT_SEC * FPS)   // number of frames between records

#define SW_VER_TRACK            605

#define ERR_NO_FILE             111
#define ERR_NO_STREAM           112
#define ERR_NO_INFO_JSON        113
#define ERR_THREAD_CREATION     222

// BARRIER
#define MAX_NUM_PERSON          50                        // max size for array of person coords
#define BARRIER_TOP             @BARRIER_TOP@             // in pixel units
#define BARRIER_BOTTOM          @BARRIER_BOTTOM@          // in pixel units
#define BARRIER_LEFT            @BARRIER_LEFT@            // in pixel units
#define BARRIER_RIGHT           @BARRIER_RIGHT@           // in pixel units
#define TOLL                    @TOLL@                    // half-thickness of barrier, in pixel
#define MIN_DIST_THRESH         100.f                     // threshold on min coords dist, in pixel
#define SCALE_X                 @SCALE_X@                 // metric scale factor in x
#define SCALE_Y                 @SCALE_Y@                 // metric scale factor in y
#define DIRECTION               "@DIRECTION@"             // set barrier orientation

// tracking
static float old_coords[MAX_NUM_PERSON][2]; // swap variable for yolo
static int old_size = 0;                    // size filled
static int UP = 0;                          // counter ^
static int DOWN = 0;                        // counter _
static int LEFT = 0;                        // counter <
static int RIGHT = 0;                       // counter >
static float x, y, min_dist, dist;
static int mins;

float fsqrt(const float x)
{
  const float xhalf = 0.5f * x;
  union // get bits for floating value
  {
      float x;
      int i;
  } u;
  u.x = x;
  u.i = 0x5f3759df - (u.i >> 1);  // gives initial guess y0
  return x * u.x * (1.5f - xhalf * u.x * u.x);// Newton step, repeating increases accuracy
}

float distance(const float x1, const float x2, const float y1, const float y2, const float scale_x, const float scale_y)
{
  return fsqrt((x1 - x2)*(x1 - x2)*scale_x + (y1 - y2)*(y1 - y2)*scale_y);
}

#define C0 @C0@  // coefficient of 5th grade polynomial
#define C1 @C1@  // c_n multiplies x^n
#define C2 @C2@
#define C3 @C3@
#define C4 @C4@
#define C5 @C5@

float fit(const int x)
{
  return C0 + C1 * x + C2 * x * x + C3 * x * x * x + C4 * x * x * x * x + C5 * x * x * x * x * x;
}

#define PROB_IN  @PROB_IN@
#define PROB_OUT @PROB_OUT@

int t(const int n, const double prob)
{
  int nt = n;
  int i;
  for(i=0; i<n; ++i)
  {
    double tmp = ((double)rand())/RAND_MAX;
    if( tmp < (prob - ((int)prob)) )
      ++nt;
    nt += ((int)prob);
  }
  return nt;
}

// flux
#define P0                      @PP@
#define P1                      @PM@
static float FLUX_IN  = 0.0f;
static float FLUX_OUT = 0.0f;
static float b0; static float x0;
static float b1; static float x1;
static float b2; static float x2;
static float b3; static float x3;
static float b4; static float x4;
static float b5; static float x5;
static float uno_meno_p0 = 1.f - P0;
static float uno_meno_p1 = 1.f - P1;
static int old_n0; static int old_n1;
static int old_n2; static int old_n3;
static int na; static int nb;

// general
typedef struct frame_info {
  double timestamp;
  int cnt_in, cnt_out;
  int flux_in, flux_out;
  int frame_number;
} frame_info;
static frame_info* infos;
static int person_name_index;
static char person_label[] = "person";
static int frame_num;
static int infos_index;
static double tnow;
static time_t tnow_t;
static struct tm* tm_tnow;
static char human_timenow[MAX_LINE_LEN];
static char json_name[200];

// image manipulation
image get_rotated_image_from_stream(CvCapture* cap)
{
  IplImage* src = cvQueryFrame(cap);
  if (!src)
    return make_empty_image(0, 0, 0);
  IplImage* trans = cvCreateImage(cvSize(src->height, src->width), src->depth, src->nChannels);
  cvTranspose(src, trans);  // transposition +
  cvFlip(trans, trans, 0);    // hor flip = 90 counterclockwise rotation
  image im = ipl_to_image(trans);
  rgbgr_image(im);
  return im;
}

int fill_rotated_image_from_stream(CvCapture* cap, image im)
{
  IplImage* src = cvQueryFrame(cap);
  if (!src)
    return 0;
  IplImage* trans = cvCreateImage(cvSize(src->height, src->width), src->depth, src->nChannels);
  cvTranspose(src, trans);  // transposition +
  cvFlip(trans, trans, 0);    // hor flip = 90 counterclockwise rotation
  ipl_into_image(trans, im);
  rgbgr_image(im);
  return 1;
}

// thread functions
void* fetch_in_thread(void* ptr)
{
#if @ROTATE_90_COUNTER@
  int status = fill_rotated_image_from_stream(cap, buff[buff_index]);
#else
  int status = fill_image_from_stream(cap, buff[buff_index]);
#endif

  letterbox_image_into(buff[buff_index], net->w, net->h, buff_letter[buff_index]);
  if (status == 0) {
    MESSAGE_ERR("fill_image_from_stream() failed to load frame\n");
    demo_done = 1;
  }
  return 0;
}

void* detect_in_thread(void* ptr)
{
  float nms = .4;
  int i, j, count = 0, nboxes = 0, person_num = 0;

  layer l = net->layers[net->n - 1];
  network_predict(net, buff_letter[(buff_index + 2) % 3].data);

  for (i = 0; i < net->n; ++i) {
    layer l = net->layers[i];
    if (l.type == YOLO || l.type == REGION || l.type == DETECTION) {
      memcpy(predictions[demo_index] + count, net->layers[i].output, sizeof(float) * l.outputs);
      count += l.outputs;
    }
  }

  detection* dets = get_network_boxes(net, buff[0].w, buff[0].h, demo_thresh, demo_hier, 0, 1, &nboxes);

  if (nms > 0)
    do_nms_obj(dets, nboxes, l.classes, nms);

  tnow = what_time_is_it_now();
  tnow_t = (time_t)tnow;
  tm_tnow = localtime(&tnow_t);
  strftime(human_timenow, MAX_LINE_LEN, "%D %X", tm_tnow);

  for (i = 0; i < nboxes; ++i) // loop over new detections
    if (dets[i].prob[person_name_index] > demo_thresh) // if person
      ++person_num;

  /* people tracking */
  if(frame_num)
  {
    na = 0;
    nb = 0;
    for (i = 0; i < nboxes; ++i) // loop over new detections
    {
      if (dets[i].prob[person_name_index] > demo_thresh) // if person
      {
        x = dets[i].bbox.x * buff[0].w; // bbox coords in [0, 1)
        y = dets[i].bbox.y * buff[0].h; // bbox coords in [0, 1)

/************************ TRACKING ****************************/
        min_dist = HUGE_VAL;
        mins = -1;
        if (y > BARRIER_TOP    - TOLL  &&
            y < BARRIER_BOTTOM + TOLL  &&
            x > BARRIER_LEFT   - TOLL  &&
            x < BARRIER_RIGHT  + TOLL   ) // if in TRACKING ROI
        {
          for(j = 0; j < old_size; ++j) // loop over old person
          {
            dist     = distance(old_coords[j][0], x, old_coords[j][1], y, SCALE_X, SCALE_Y);
            if(dist > MIN_DIST_THRESH) continue;
            mins     = (min_dist < dist) ? mins : j;
            min_dist = (min_dist < dist) ? min_dist : dist;
          }
/************************ FLUX ********************************/
          if(strcmp(DIRECTION,"UP_DOWN") == 0)   // make a switch instead
          {
            if (y < (BARRIER_TOP + BARRIER_BOTTOM)*.5f) ++na;
            else                                        ++nb;
          }
          else if(strcmp(DIRECTION,"LEFT_RIGHT") == 0)
          {
            if (x < (BARRIER_LEFT + BARRIER_RIGHT)*.5f) ++na;
            else                                        ++nb;
          }
        } // end if in TRACKING ROI
/************************ TRACKING ****************************/
        if(mins == -1) continue; // no matches found
        UP    += (y < BARRIER_TOP     && old_coords[mins][1] > BARRIER_TOP)    ? 1 : 0;
        DOWN  += (y > BARRIER_BOTTOM  && old_coords[mins][1] < BARRIER_BOTTOM) ? 1 : 0;
        LEFT  += (x < BARRIER_LEFT    && old_coords[mins][0] > BARRIER_LEFT)   ? 1 : 0;
        RIGHT += (x > BARRIER_RIGHT   && old_coords[mins][0] < BARRIER_RIGHT)  ? 1 : 0;
/**********************************************************/
      }
    }
  }
  else
  {
    na     = person_num * .5;
    nb     = person_num * .5;
    old_n0 = 0;
    old_n1 = 0;
    old_n2 = 0;
    old_n3 = 0;
  }

  b0 = old_n0 * uno_meno_p0;
  b1 = old_n2 * uno_meno_p0 + old_n0 * P0;
  b2 = old_n1 * uno_meno_p1 + old_n3 * P1;
  b3 = old_n3 * uno_meno_p1;
  b4 = na;
  b5 = nb;

  x0 = - b2 + b4;
  x1 = b2;
  x2 = b1;
  x3 = - b1 + b5;
  x4 = - b0 - b2 + b4;
  x5 = - b1 - b3 + b5;

  FLUX_IN  = x4;
  FLUX_OUT = x5;

  old_size = -1;
  for( i = 0; i < nboxes; ++i)
    if (dets[i].prob[person_name_index] > demo_thresh) // if person
    {
      x = dets[i].bbox.x * buff[0].w; // bbox coords in [0, 1)
      y = dets[i].bbox.y * buff[0].h; // bbox coords in [0, 1)
      if (y > BARRIER_TOP    - TOLL  &&
          y < BARRIER_BOTTOM + TOLL  &&
          x > BARRIER_LEFT   - TOLL  &&
          x < BARRIER_RIGHT  + TOLL   ) // if in ROI
      {
        ++old_size;
        old_coords[old_size][0] = x;
        old_coords[old_size][1] = y;
      }
    }
  ++old_size; // REMEMBER REMEMBER : old_size must be greater than last index
  ++frame_num;

#ifndef _WIN32
  MESSAGE("\033[2J"); /* clear the screen */
  MESSAGE("\033[1;1H"); /* move cursor to line 1 column 1 */
#endif
  MESSAGE("UNIX  Time   : %.3f\n", tnow);
  MESSAGE("Human Time   : %s\n", human_timenow);
  MESSAGE("Frame Number : %d\n", frame_num);
  MESSAGE("Puny humans  : %d\n", person_num);
  MESSAGE("FPS          : %.1f\n", fps);
  MESSAGE("CNT_IN       : %d\n", infos[infos_index].cnt_in);
  MESSAGE("CNT_OUT      : %d\n", infos[infos_index].cnt_out);

  infos[infos_index].cnt_in  = @BARRIER_IN@;
  infos[infos_index].cnt_out = @BARRIER_OUT@;
  infos[infos_index].flux_in  += FLUX_IN;
  infos[infos_index].flux_out += FLUX_OUT;

  if(frame_num % SAMPLING_FRAME_RATE == 0){ // every sampling dt, store a RECORD
    infos[infos_index].timestamp = tnow;
    infos[infos_index].frame_number = frame_num;
    infos[infos_index].flux_in  /= SAMPLING_FRAME_RATE;
    infos[infos_index].flux_out /= SAMPLING_FRAME_RATE;

    UP = 0;
    DOWN = 0;
    LEFT = 0;
    RIGHT = 0;
    if( frame_num > 1000*MAX_FRAME_INFO_TO_STORE ) frame_num = 0; // because of json key padding
    ++infos_index;
  }

  if (infos_index == MAX_FRAME_INFO_TO_STORE) {
    sprintf(json_name, "%s/%s_%ld.json", JSON_FOLDER, "@PEOPLEBOX_ID@", tnow_t);
    FILE* info_json = fopen(json_name, "w");
    if (info_json == NULL) {
      MESSAGE_ERR("Cannot create info json\n");
      exit(ERR_NO_INFO_JSON);
    }
    fprintf(info_json, "{\n");
    for (i = 0; i < MAX_FRAME_INFO_TO_STORE; ++i) {
      fprintf(info_json, "\t\"frame_%05d\" : {\n", infos[i].frame_number);
      fprintf(info_json, "\t\t\"timestamp\" : %.3f,\n", infos[i].timestamp);
      fprintf(info_json, "\t\t\"id_box\" : \"%s\",\n", "@PEOPLEBOX_ID@");
      fprintf(info_json, "\t\t\"detection\" : \"%s\",\n", "@DETECTION_TYPE_TRACK@");
      fprintf(info_json, "\t\t\"sw_ver\" : %d,\n", SW_VER_TRACK);
      fprintf(info_json, "\t\t\"people_presence\" : %d,\n", person_num);
      fprintf(info_json, "\t\t\"people_count\" : [{\"id\" : \"%s\", \"count\" : %d}, {\"id\" : \"%s\", \"count\" : %d}],\n", "@PEOPLEBOX_ID@-IN", t((int)(fit(infos[i].cnt_in) + .5), PROB_IN), "@PEOPLEBOX_ID@-OUT", t((int)(fit(infos[i].cnt_out) + .5), PROB_OUT));
      fprintf(info_json, "\t\t\"people_flux\" : [{\"id\" : \"%s\", \"flux\" : %d}, {\"id\" : \"%s\", \"flux\" : %d}],\n", "@PEOPLEBOX_ID@-IN", infos[i].flux_in, "@PEOPLEBOX_ID@-OUT", infos[i].flux_out);
      fprintf(info_json, "\t\t\"diagnostics\" : [{\"id\" : \"coming\", \"value\" : \"soon\"}]\n");
      (i < MAX_FRAME_INFO_TO_STORE-1) ? fprintf(info_json, "\t},\n") : fprintf(info_json, "\t}\n");
    }
    fprintf(info_json, "}");
    fclose(info_json);
    infos_index = 0;
    memset(infos, 0, MAX_FRAME_INFO_TO_STORE * sizeof(frame_info));
    MESSAGE("Info dumped to JSON\n");
  }

  free_detections(dets, nboxes);
  demo_index = (demo_index + 1) % demo_frame;
  return 0;
}

int main()
{
  int i;
  char* cfg = "darknet/cfg/yolov3.cfg";
  char* weights = "darknet/yolov3.weights";
  char* filename = "@CAMERA_PROTOCOL@@CAMERA_CREDENTIALS@@CAMERA_IP@@CAMERA_FEED_ADDRESS@";
  char* name_list = "darknet/data/coco.names";

  srand(12345);

  demo_classes = 80;

  /* prepare frame info array */
  infos = (frame_info*)calloc(MAX_FRAME_INFO_TO_STORE, sizeof(frame_info));

  FILE* file = fopen(name_list, "r");
  if (!file) {
    MESSAGE_ERR("cannot open: %s", name_list);
    exit(ERR_NO_FILE);
  }
  demo_names = (char**)malloc(demo_classes * sizeof(char*));
  for (i = 0; i < demo_classes; ++i) {
    demo_names[i] = fgetl(file);
    if (!strcmp(demo_names[i], person_label))
      person_name_index = i;
  }
  fclose(file);

  net = load_network(cfg, weights, 0);
  set_batch_network(net, 1);
  pthread_t detect_thread;
  pthread_t fetch_thread;

  demo_total = 0;
  for (i = 0; i < net->n; ++i) {
    layer l = net->layers[i];
    if (l.type == YOLO || l.type == REGION || l.type == DETECTION) {
      demo_total += l.outputs;
    }
  }

  predictions = (float**)calloc(demo_frame, sizeof(float*));
  for (i = 0; i < demo_frame; ++i)
    predictions[i] = (float*)calloc(demo_total, sizeof(float));

  avg = (float*)calloc(demo_total, sizeof(float));

  MESSAGE("video stream: %s\n", filename);
  cap = cvCaptureFromFile(filename);

  if (!cap) {
    MESSAGE_ERR("cannot connect to video stream.\n");
    exit(ERR_NO_STREAM);
  }

#if @ROTATE_90_COUNTER@
  buff[0] = get_rotated_image_from_stream(cap);
#else
  buff[0] = get_image_from_stream(cap);
#endif
  buff[1] = copy_image(buff[0]);
  buff[2] = copy_image(buff[0]);
  buff_letter[0] = letterbox_image(buff[0], net->w, net->h);
  buff_letter[1] = letterbox_image(buff[0], net->w, net->h);
  buff_letter[2] = letterbox_image(buff[0], net->w, net->h);

  i = 0;
  demo_time = what_time_is_it_now();
  while (!demo_done) {
    buff_index = (buff_index + 1) % 3;
    if (pthread_create(&fetch_thread, 0, fetch_in_thread, 0))
    {
      MESSAGE_ERR("thread creation failed");
      exit(ERR_THREAD_CREATION);
    }
    if (pthread_create(&detect_thread, 0, detect_in_thread, 0))
    {
      MESSAGE_ERR("thread creation failed");
      exit(ERR_THREAD_CREATION);
    }

    fps = 1. / (what_time_is_it_now() - demo_time);
    demo_time = what_time_is_it_now();

    pthread_join(fetch_thread, 0);
    pthread_join(detect_thread, 0);

    ++i;
  }

  // delete pointers
  for (i = 0; i < demo_classes; ++i)
    free(demo_names[i]);
  free(demo_names);

  return 0;
}
