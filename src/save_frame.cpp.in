#include <iostream>
#include <fstream>
#include <ctime>

#include <opencv2/opencv.hpp>

#include <common.h>

#define ERROR_VIDEO_STREAM              1
#define ERROR_DUMP_FRAME                2

#define IMAGE_FOLDER                    "images"

#define CAM_FPS                         3
#define ENABLE_TIMESTAMP_BASED_SAMPLING 1
#define SAMPLING_DT_SEC                 300
#define FRAME_SAMPLING_RATE             (CAM_FPS * SAMPLING_DT_SEC)

#define SW_VER                          121

int main(int argc, char** argv)
{
  std::string input;
  if (argc > 1)
    input = argv[1];
  else
    input = "rtsp://@CAMERA_CREDENTIALS@@@CAMERA_IP@:554/rtpstream/config1=u";

  std::ofstream swver("save_frame.sw_ver");
  swver << std::time(0) << std::endl << SW_VER << std::endl;
  swver.close();

  cv::VideoCapture vcap(input);
  if (!vcap.isOpened()) {
    MESSAGE_ERR("Error opening video stream or file : %s\n", input.c_str());
    exit(ERROR_VIDEO_STREAM);
  }

  cv::Mat frame;
  std::string frame_name;
  int frame_cnt = 0;
  for (;;) {
    auto timenow = std::time(0);
#if ENABLE_TIMESTAMP_BASED_SAMPLING
    if (timenow % SAMPLING_DT_SEC == 0) {
#else
    if (frame_cnt % FRAME_SAMPLING_RATE == 0) {
#endif
      vcap >> frame;
#if @ROTATE_90_COUNTER@
      cv::transpose(frame, frame);
      cv::flip(frame, frame, 0);
#endif
      frame_name = std::string(IMAGE_FOLDER) + "/@PEOPLEBOX_ID@_" + std::to_string(timenow);
      if (imwrite(frame_name + ".jpg", frame))
        MESSAGE("Frame %d (%s) dumped successfully\n", frame_cnt, frame_name.c_str());
      else {
        MESSAGE_ERR("Unable to write frame");
        exit(ERROR_DUMP_FRAME);
      }

#if @ENABLE_TRIPLET@
      vcap >> frame;
#if @ROTATE_90_COUNTER@
      cv::transpose(frame, frame);
      cv::flip(frame, frame, 0);
#endif
      if (imwrite(frame_name + ".1.jpg", frame))
        MESSAGE("Frame %d.1 (%s) dumped successfully\n", frame_cnt, frame_name.c_str());
      else {
        MESSAGE_ERR("Unable to write frame");
        exit(ERROR_DUMP_FRAME);
      }

      vcap >> frame;
#if @ROTATE_90_COUNTER@
      cv::transpose(frame, frame);
      cv::flip(frame, frame, 0);
#endif
      if (imwrite(frame_name + ".2.jpg", frame))
        MESSAGE("Frame %d.2 (%s) dumped successfully\n", frame_cnt, frame_name.c_str());
      else {
        MESSAGE_ERR("Unable to write frame");
        exit(ERROR_DUMP_FRAME);
      }
#endif
    } else {
      vcap.grab();
    }
    ++frame_cnt;
    if( frame_cnt > 10000 ) frame_cnt = 0;
  }
  vcap.release();

  return 0;
}
