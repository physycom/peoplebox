#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#include "image.h"
#include <support.h>

static char** demo_names;
static float demo_thresh;
static float demo_hier;
static float demo_classes;
static int demo_total;
static int demo_frame;
static int demo_time;
static int demo_done;
static int demo_index;

static int person_name_index;
static char person_label[] = "person";
static int frame_num;
static int infos_index;

static network* net;
static float** predictions;
static float* avg;
static image buff[3];
static image buff_letter[3];
static int buff_index;
static CvCapture* cap;
static float fps;

static frame_info* infos;

void* fetch_in_thread(void*);
void* detect_in_thread(void*);

int main(int argc, char** argv)
{
  if(argc < 2){
    fprintf(stderr, "Usage : %s path/to/video\n", argv[0]);
    exit(1);
  }

  int i;
  char* cfg = "darknet/cfg/yolov3.cfg";
  char* weights = "darknet/yolov3.weights";
  char* filename = argv[1];
  char* name_list = "darknet/data/coco.names";

  demo_thresh = .5;
  demo_hier = .5;
  demo_classes = 80;

  /* prepare frame info array */
  infos = (frame_info*)calloc(MAX_FRAME_INFO_TO_STORE, sizeof(frame_info));

  FILE* file = fopen(name_list, "r");
  if (!file) {
    MESSAGE_ERR("cannot open: %s", name_list);
    exit(ERR_NO_FILE);
  }
  demo_names = (char**)malloc(demo_classes * sizeof(char*));
  for (i = 0; i < demo_classes; ++i) {
    demo_names[i] = fgetl(file);
    if (!strcmp(demo_names[i], person_label))
      person_name_index = i;
  }
  fclose(file);

  net = load_network(cfg, weights, 0);
  set_batch_network(net, 1);
  pthread_t detect_thread;
  pthread_t fetch_thread;

  demo_total = 0;
  for (i = 0; i < net->n; ++i) {
    layer l = net->layers[i];
    if (l.type == YOLO || l.type == REGION || l.type == DETECTION) {
      demo_total += l.outputs;
    }
  }

  predictions = (float**)calloc(demo_frame, sizeof(float*));
  for (i = 0; i < demo_frame; ++i)
    predictions[i] = (float*)calloc(demo_total, sizeof(float));

  avg = (float*)calloc(demo_total, sizeof(float));

  printf("video stream: %s\n", filename);
  cap = cvCaptureFromFile(filename);

  if (!cap) {
    MESSAGE_ERR("cannot connect to video stream.\n");
    exit(ERR_NO_STREAM);
  }

  buff[0] = get_image_from_stream(cap);
  buff[1] = copy_image(buff[0]);
  buff[2] = copy_image(buff[0]);
  buff_letter[0] = letterbox_image(buff[0], net->w, net->h);
  buff_letter[1] = letterbox_image(buff[0], net->w, net->h);
  buff_letter[2] = letterbox_image(buff[0], net->w, net->h);

  i = 0;
  demo_time = what_time_is_it_now();
  while (!demo_done) {
    buff_index = (buff_index + 1) % 3;
    if (pthread_create(&fetch_thread, 0, fetch_in_thread, 0))
    {
      MESSAGE_ERR("thread creation failed");
      exit(ERR_THREAD_CREATION);
    }
    if (pthread_create(&detect_thread, 0, detect_in_thread, 0))
    {
      MESSAGE_ERR("thread creation failed");
      exit(ERR_THREAD_CREATION);
    }

    fps = 1. / (what_time_is_it_now() - demo_time);
    demo_time = what_time_is_it_now();

    pthread_join(fetch_thread, 0);
    pthread_join(detect_thread, 0);

    ++i;
  }

  // delete pointers
  for (i = 0; i < demo_classes; ++i)
    free(demo_names[i]);
  free(demo_names);

  return 0;
}
